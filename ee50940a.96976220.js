(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{657:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),i=(a(0),a(707)),o={title:"Data Model Overview"},l={unversionedId:"data-model/overview",id:"version-5.0.0/data-model/overview",isDocsHomePage:!1,title:"Data Model Overview",description:"InterMine uses an object-oriented data model. Classes in the model and relationships between them are defined in an XML file. Depending on which data types you include, you will need different classes and fields in the model, so the model is generated from a core model XML file and any number of additions files. These additions files can define extra classes to be added to the model and define extra fields for additional classes.",source:"@site/versioned_docs/version-5.0.0/data-model/overview.md",slug:"/data-model/overview",permalink:"/im-docs/docs/data-model/overview",editUrl:"https://github.com/intermine/im-docs/edit/master/versioned_docs/version-5.0.0/data-model/overview.md",version:"5.0.0",sidebar:"version-5.0.0/someSidebar",previous:{title:"How to set up your InterMine environment on the Amazon Cloud",permalink:"/im-docs/docs/intermine/amazon"},next:{title:"Model Description",permalink:"/im-docs/docs/data-model/model"}},s=[{value:"Data source and Data set",id:"data-source-and-data-set",children:[]},{value:"Organism",id:"organism",children:[]},{value:"Chromosome location",id:"chromosome-location",children:[]},{value:"Identifiers",id:"identifiers",children:[]},{value:"Sequence Ontology term",id:"sequence-ontology-term",children:[]},{value:"so_terms",id:"so_terms",children:[]},{value:"Model Merging",id:"model-merging",children:[]}],c={toc:s};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"InterMine uses an object-oriented data model. Classes in the model and relationships between them are defined in an XML file. Depending on which data types you include, you will need different classes and fields in the model, so the model is generated from a core model XML file and any number of additions files. These additions files can define extra classes to be added to the model and define extra fields for additional classes."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Elements of the model are represented by Java classes and references"),Object(i.b)("p",{parentName:"li"},"between them.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"These Java classes map automatically to tables in the database"),Object(i.b)("p",{parentName:"li"},"schema.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The object model is defined as an XML file, that defines classes,"),Object(i.b)("p",{parentName:"li"},"their attributes and references between classes.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The Java classes and database schema are automatically generated"),Object(i.b)("p",{parentName:"li"},"from an XML file."))),Object(i.b)("p",null,"You can easily adapt InterMine to include your own data by creating new additions files, see the tutorial for a detailed walk though on how to do this."),Object(i.b)("h2",{id:"data-source-and-data-set"},"Data source and Data set"),Object(i.b)("p",null,'Most data types in the InterMine core model have a reference to a "data set" and a corresponding "data source".'),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Data source")),Object(i.b)("p",null,"The origin of the data. Usually an organisation, e.g. UniProt, InterPro"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Data set")),Object(i.b)("p",null,"A set of results or data from a data source. e.g. InterPro GO Annotation data set."),Object(i.b)("p",null,"These data are meant to enable your users to easily trace the provenance of your data."),Object(i.b)("h2",{id:"organism"},"Organism"),Object(i.b)("p",null,"Include the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/im-docs/docs/database/data-sources/library/organism"}),"Organism")," data source in your build. Many of the tools available in InterMine assume this source will be loaded and expect a populated organism table."),Object(i.b)("h2",{id:"chromosome-location"},"Chromosome location"),Object(i.b)("p",null,"InterMine uses the -1 / 1 convention for strands."),Object(i.b)("h2",{id:"identifiers"},"Identifiers"),Object(i.b)("p",null,"All sequence features must have a non-NULL, unique identifier set for their ",Object(i.b)("inlineCode",{parentName:"p"},"primaryIdentifier")," field."),Object(i.b)("h2",{id:"sequence-ontology-term"},"Sequence Ontology term"),Object(i.b)("p",null,"All sequence features should have a reference to the appropriate ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.sequenceontology.org"}),"sequence ontology term"),". The Java data parsers do this for you automatically."),Object(i.b)("h2",{id:"so_terms"},"so","_","terms"),Object(i.b)("p",null,"Adding sequence ontology terms to the ",Object(i.b)("inlineCode",{parentName:"p"},"so_terms")," text file will add these classes to your data model."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"There is a mechanism for automatically generating a set of class"),Object(i.b)("p",{parentName:"li"},"definitions that reflect the structure of the SO."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Is-a relationships in the SO become subclass relationships in"),Object(i.b)("p",{parentName:"li"},"the model.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Part-of/member relationships in the SO become many-to-one or"),Object(i.b)("p",{parentName:"li"},"many-to-many relationships in the model ","(","determined by the"),Object(i.b)("p",{parentName:"li"},"configs at the bottom of ",Object(i.b)("inlineCode",{parentName:"p"},"so_terms"),")",".")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Only the terms listed in ",Object(i.b)("inlineCode",{parentName:"p"},"so_terms")," become classes in the model."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"In particular, a descendant class D and an ancestor class A may"),Object(i.b)("p",{parentName:"li"},"be included while none of the intervening classes ","(","B and C",")"," are.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The class generator takes care to make sure that D becomes a"),Object(i.b)("p",{parentName:"li"},"direct subclass of A and that it has whatever"),Object(i.b)("p",{parentName:"li"},"references/collections it would have inherited had B and C been"),Object(i.b)("p",{parentName:"li"},"included.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A particular example is transcript, which is four levels below"),Object(i.b)("p",{parentName:"li"},"sequence","_","feature in the SO, but Transcript is a direct subclass"),Object(i.b)("p",{parentName:"li"},"of SequenceFeature in the model. In addition, Transcript has a"),Object(i.b)("p",{parentName:"li"},"reference to Gene, inherited from the intervening SO term"),Object(i.b)("p",{parentName:"li"},"gene","_","member","_","region, which is omitted from the model.")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The model generated from ",Object(i.b)("inlineCode",{parentName:"p"},"so_term")," is augmented by the contents of intermine/bio/model/core.xml and"),Object(i.b)("p",{parentName:"li"},"intermine/bio/model/genomic","_","additions.xml ","(","e.g., core.xml is where"),Object(i.b)("p",{parentName:"li"},"SequenceFeature is made a subclass of BioEntity",")",".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The generated model can be further augmented in the usual way by a"),Object(i.b)("p",{parentName:"li"},"source's source","_","additions.xml file and the global additions file."))),Object(i.b)("h2",{id:"model-merging"},"Model Merging"),Object(i.b)("p",null,"The InterMine build system generates the data model by merging the following data files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"core.xml")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"genomic","_","additions.xml")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"so","_","terms ","(","see above",")")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"SOURCE","_","additions files for each data source listed in your project"),Object(i.b)("p",{parentName:"li"},"XML file")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"globalAdditionsFile")," ","(","if specified",")"))),Object(i.b)("p",null,"See ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/im-docs/docs/database/database-building/model-merging"}),"Model Merging")," for details."))}d.isMDXComponent=!0},707:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=d(a),p=n,u=b["".concat(o,".").concat(p)]||b[p]||m[p]||i;return a?r.a.createElement(u,l(l({ref:t},c),{},{components:a})):r.a.createElement(u,l({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);